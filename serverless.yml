# This file tells AWS how to create our quiz app
service: quizex
frameworkVersion: "3"

# AWS settings
provider:
  name: aws
  runtime: nodejs18.x
  region: eu-north-1
  httpApi:
    cors: true
  environment:
    JWT_SECRET: secret_password
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/users"
        - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/quizzes"
        - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/questions"
        - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/scores"

# Package settings
package:
  individually: false
  patterns:
    - '!README.md'
    - '!test-endpoints.html'
    - '!.git/**'
    - '!*.md'

# Our API functions
functions:
  # Quiz management
  createQuiz:
    handler: Functions/createQuiz.handler
    events:
      - httpApi:
          path: /quiz
          method: POST

  getAllQuizzes:
    handler: Functions/getAllQuizzes.handler
    events:
      - httpApi:
          path: /quizzes
          method: GET

  deleteQuiz:
    handler: Functions/deleteQuiz.handler
    events:
      - httpApi:
          path: /quiz/{id}
          method: DELETE

  # Question management
  addQuestionToQuiz:
    handler: Functions/addQuestionToQuiz.handler
    events:
      - httpApi:
          path: /quiz/{id}/question
          method: POST

  getQuizQuestions:
    handler: Functions/getQuizQuestions.handler
    events:
      - httpApi:
          path: /quiz/{id}/questions
          method: GET

  # User management
  createUser:
    handler: Functions/createUser.handler
    events:
      - httpApi:
          path: /user
          method: POST

  loginUser:
    handler: Functions/loginUser.handler
    events:
      - httpApi:
          path: /login
          method: POST

  # Leaderboard management
  registerScore:
    handler: Functions/registerScore.handler
    events:
      - httpApi:
          path: /quiz/{id}/score
          method: POST

  getLeaderboard:
    handler: Functions/getLeaderboard.handler
    events:
      - httpApi:
          path: /quiz/{id}/leaderboard
          method: GET


# Database tables
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    QuizzesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: quizzes
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    QuestionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: questions
        AttributeDefinitions:
          - AttributeName: questionId
            AttributeType: S
          - AttributeName: quizId
            AttributeType: S
        KeySchema:
          - AttributeName: questionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: quizId-index
            KeySchema:
              - AttributeName: quizId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
   

    ScoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: scores
        AttributeDefinitions:
          - AttributeName: scoreId
            AttributeType: S
          - AttributeName: quizId
            AttributeType: S
        KeySchema:
          - AttributeName: scoreId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: quizId-index
            KeySchema:
              - AttributeName: quizId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST